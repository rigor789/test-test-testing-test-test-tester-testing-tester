{
  "version": 3,
  "sources": ["../src/NativeScriptPreviewWebpackPlugin.ts"],
  "sourcesContent": ["import { createFsFromVolume, Volume } from \"memfs\";\nimport { lookup as mime } from \"mime-types\";\nimport path from \"path\";\n\nfunction tapProcessSend(\n  callback: (send: typeof process.send, ...args: any) => void\n) {\n  const currentSend = process.send.bind(process);\n\n  if (!currentSend) {\n    return;\n  }\n\n  process.send = (...args) => {\n    let res;\n    try {\n      console.log(...args)\n      res = currentSend(...args);\n    } catch (err) {\n      console.log(\"Error in tapProcessSend\", err);\n    }\n\n    try {\n      callback(currentSend, ...args);\n    } catch (err) {\n      console.log(\"Error in tapProcessSend callback.\", err);\n    }\n\n    return res;\n  };\n}\n\nexport class NativeScriptPreviewWebpackPlugin {\n  constructor(private fs = createFsFromVolume(new Volume())) {}\n\n  apply(compiler) {\n    const outPath = compiler.options.output.path;\n    compiler.outputFileSystem = this.fs;\n\n    tapProcessSend((send, message) => {\n      if (!message) {\n        return;\n      }\n\n      try {\n        if (message.type !== \"compilation\") {\n          return;\n        }\n\n        const { emittedAssets, staleAssets } = message.data;\n\n        const dataToSend = {\n          type: \"files\",\n          data: {\n            emittedAssets: emittedAssets.map((asset) => {\n              const assetPath = `${outPath}/${asset}`;\n              const { size } = this.fs.statSync(assetPath);\n              return {\n                path: asset,\n                type: mime(path.extname(asset)),\n                size,\n                contents: this.fs.readFileSync(`${outPath}/${asset}`),\n              };\n            }),\n            staleAssets,\n          },\n        };\n\n        send(dataToSend);\n      } catch (err) {\n        console.log(err);\n      }\n    });\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAA2C;AAC3C,wBAA+B;AAC/B,kBAAiB;AAEjB,wBACE,UACA;AACA,QAAM,cAAc,QAAQ,KAAK,KAAK,OAAO;AAE7C,MAAI,CAAC,aAAa;AAChB;AAAA,EACF;AAEA,UAAQ,OAAO,IAAI,SAAS;AAC1B,QAAI;AACJ,QAAI;AACF,cAAQ,IAAI,GAAG,IAAI;AACnB,YAAM,YAAY,GAAG,IAAI;AAAA,IAC3B,SAAS,KAAP;AACA,cAAQ,IAAI,2BAA2B,GAAG;AAAA,IAC5C;AAEA,QAAI;AACF,eAAS,aAAa,GAAG,IAAI;AAAA,IAC/B,SAAS,KAAP;AACA,cAAQ,IAAI,qCAAqC,GAAG;AAAA,IACtD;AAEA,WAAO;AAAA,EACT;AACF;AAEO,MAAM,iCAAiC;AAAA,EAC5C,YAAoB,KAAK,qCAAmB,IAAI,oBAAO,CAAC,GAAG;AAAvC;AAAA,EAAwC;AAAA,EAE5D,MAAM,UAAU;AACd,UAAM,UAAU,SAAS,QAAQ,OAAO;AACxC,aAAS,mBAAmB,KAAK;AAEjC,mBAAe,CAAC,MAAM,YAAY;AAChC,UAAI,CAAC,SAAS;AACZ;AAAA,MACF;AAEA,UAAI;AACF,YAAI,QAAQ,SAAS,eAAe;AAClC;AAAA,QACF;AAEA,cAAM,EAAE,eAAe,gBAAgB,QAAQ;AAE/C,cAAM,aAAa;AAAA,UACjB,MAAM;AAAA,UACN,MAAM;AAAA,YACJ,eAAe,cAAc,IAAI,CAAC,UAAU;AAC1C,oBAAM,YAAY,GAAG,WAAW;AAChC,oBAAM,EAAE,SAAS,KAAK,GAAG,SAAS,SAAS;AAC3C,qBAAO;AAAA,gBACL,MAAM;AAAA,gBACN,MAAM,8BAAK,oBAAK,QAAQ,KAAK,CAAC;AAAA,gBAC9B;AAAA,gBACA,UAAU,KAAK,GAAG,aAAa,GAAG,WAAW,OAAO;AAAA,cACtD;AAAA,YACF,CAAC;AAAA,YACD;AAAA,UACF;AAAA,QACF;AAEA,aAAK,UAAU;AAAA,MACjB,SAAS,KAAP;AACA,gBAAQ,IAAI,GAAG;AAAA,MACjB;AAAA,IACF,CAAC;AAAA,EACH;AACF;",
  "names": []
}
